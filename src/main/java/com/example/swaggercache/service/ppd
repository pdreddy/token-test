@ExtendWith(MockitoExtension.class)
class CertificateControllerTest {

    @InjectMocks
    private CertificateController certificateController;

    @Mock
    private CertificateService certificateService;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private Principal mockPrincipal;

    @BeforeEach
    void setup() {
        when(httpServletRequest.getUserPrincipal()).thenReturn(mockPrincipal);
        when(mockPrincipal.getName()).thenReturn("admin_user");
    }

    @Test
    void testFindAllCerts_Success() {
        List<CertificateResponse> responses = List.of(new CertificateResponse());
        when(certificateService.getAllCertificates()).thenReturn(responses);

        ResponseEntity<List<CertificateResponse>> response = certificateController.findAllCerts(httpServletRequest);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(1, response.getBody().size());
    }

    @Test
    void testGetCertificatesByClientId_Success() {
        List<CertificateResponse> responses = List.of(new CertificateResponse());
        when(certificateService.getCertificatesByClientId("client123")).thenReturn(responses);

        ResponseEntity<List<CertificateResponse>> response = certificateController.getCertificatesByClientId("client123");

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(1, response.getBody().size());
    }

    @Test
    void testGetJwks_Success() {
        CertificateResponse response = new CertificateResponse();
        response.setJwk("{\"kty\":\"RSA\"}");

        when(certificateService.getCertificatesByClientId("client123"))
            .thenReturn(List.of(response));

        ResponseEntity<String> jwks = certificateController.getJwks("client123");

        assertEquals(HttpStatus.OK, jwks.getStatusCode());
        assertTrue(jwks.getBody().contains("kty"));
    }

    @Test
    void testGetJwks_WithErrorInJWK() {
        CertificateResponse response = new CertificateResponse();
        response.setJwk("invalid");

        when(certificateService.getCertificatesByClientId("client123"))
            .thenReturn(List.of(response));

        ResponseEntity<String> jwks = certificateController.getJwks("client123");

        assertEquals(HttpStatus.OK, jwks.getStatusCode());
    }

    @Test
    void testSaveCert_Success() throws Exception {
        String samplePem = "-----BEGIN CERTIFICATE-----\n" +
                           Base64.getEncoder().encodeToString("test".getBytes()) +
                           "\n-----END CERTIFICATE-----";

        when(mockPrincipal.getName()).thenReturn("admin_user");

        CertificateResponse response = new CertificateResponse();
        when(certificateService.saveCertificate(any())).thenReturn(response);

        ResponseEntity<?> result = certificateController.saveCert("clientId", samplePem, httpServletRequest, "clientId");

        assertEquals(HttpStatus.CREATED, result.getStatusCode());
    }

    @Test
    void testSaveCert_InvalidClientId() throws Exception {
        String samplePem = "-----BEGIN CERTIFICATE-----\n" +
                           Base64.getEncoder().encodeToString("test".getBytes()) +
                           "\n-----END CERTIFICATE-----";

        ResponseEntity<?> result = certificateController.saveCert("clientId", samplePem, httpServletRequest, "wrongClientId");

        assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());
        assertTrue(result.getBody().toString().contains("Invalid Client ID"));
    }

    @Test
    void testSaveCert_Exception() throws Exception {
        String invalidPem = "invalid-pem";

        ResponseEntity<?> result = certificateController.saveCert("clientId", invalidPem, httpServletRequest, "clientId");

        assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());
        assertTrue(result.getBody().toString().contains("Failed to process certificate"));
    }
}


@ExtendWith(MockitoExtension.class)
class CertificateServiceTest {

    @InjectMocks
    private CertificateService certificateService;

    @Mock
    private CertificateRepository certificateRepository;

    @Mock
    private RedisTemplate<String, String> redisTemplate;

    @Mock
    private ObjectMapper objectMapper;

    @Mock
    private ValueOperations<String, String> valueOperations;

    @BeforeEach
    void setup() {
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
    }

    @Test
    void testSaveCertificate_Success() throws Exception {
        CertificateRequest request = new CertificateRequest();
        request.setClientId("client1");

        X509Certificate x509Cert = mock(X509Certificate.class);
        when(x509Cert.getSerialNumber()).thenReturn(BigInteger.valueOf(12345));
        when(x509Cert.getEncoded()).thenReturn("cert".getBytes());
        when(x509Cert.getPublicKey()).thenReturn(mock(RSAPublicKey.class));
        when(x509Cert.getNotBefore()).thenReturn(new Date());
        when(x509Cert.getNotAfter()).thenReturn(new Date(System.currentTimeMillis() + 100000));
        when(x509Cert.getSubjectX500Principal()).thenReturn(new X500Principal("CN=demo"));

        request.setX509Cert(x509Cert);

        when(certificateRepository.existsByClientIdAndCertSerialNumber(eq("client1"), eq(12345L)))
                .thenReturn(false);

        Certificate saved = Certificate.builder()
                .clientId("client1")
                .certSerialNumber(12345L)
                .certSubject("demo")
                .build();

        when(certificateRepository.save(any(Certificate.class))).thenReturn(saved);

        CertificateResponse response = certificateService.saveCertificate(request);
        assertNotNull(response);
        assertEquals("client1", response.getClientId());
    }

    @Test
    void testSaveCertificate_AlreadyExists_Throws() {
        CertificateRequest request = new CertificateRequest();
        request.setClientId("client1");

        X509Certificate x509Cert = mock(X509Certificate.class);
        when(x509Cert.getSerialNumber()).thenReturn(BigInteger.valueOf(12345));
        when(x509Cert.getEncoded()).thenReturn("cert".getBytes());
        request.setX509Cert(x509Cert);

        when(certificateRepository.existsByClientIdAndCertSerialNumber("client1", 12345L))
                .thenReturn(true);

        RuntimeException ex = assertThrows(RuntimeException.class, () ->
                certificateService.saveCertificate(request));

        assertTrue(ex.getMessage().contains("already associated"));
    }

    @Test
    void testSaveCertificate_ThrowsException() throws Exception {
        CertificateRequest request = new CertificateRequest();
        request.setClientId("client1");

        X509Certificate x509Cert = mock(X509Certificate.class);
        when(x509Cert.getSerialNumber()).thenReturn(BigInteger.valueOf(12345));
        when(x509Cert.getEncoded()).thenThrow(new CertificateEncodingException());
        request.setX509Cert(x509Cert);

        assertThrows(RuntimeException.class, () -> certificateService.saveCertificate(request));
    }

    @Test
    void testGetCertificatesByClientId_FromRedisSuccess() throws Exception {
        String clientId = "client1";
        String cacheKey = "CACHE::CLIENT::client1";
        String cachedJson = "[{\"clientId\":\"client1\"}]";
        List<Certificate> certList = List.of(new Certificate());

        when(valueOperations.get(cacheKey)).thenReturn(cachedJson);
        when(objectMapper.getTypeFactory()).thenReturn(new ObjectMapper().getTypeFactory());
        when(objectMapper.readValue(eq(cachedJson), any(JavaType.class))).thenReturn(certList);

        List<CertificateResponse> responses = certificateService.getCertificatesByClientId(clientId);

        assertEquals(1, responses.size());
    }

    @Test
    void testGetCertificatesByClientId_FallbackToDB() throws Exception {
        String clientId = "client1";
        String cacheKey = "CACHE::CLIENT::client1";

        when(valueOperations.get(cacheKey)).thenReturn(null);

        List<Certificate> certList = List.of(new Certificate());
        when(certificateRepository.findByClientIdOrderByCreatedDateDesc(clientId))
                .thenReturn(certList);

        when(objectMapper.writeValueAsString(certList)).thenReturn("[]");

        List<CertificateResponse> responses = certificateService.getCertificatesByClientId(clientId);

        assertEquals(1, responses.size());
        verify(valueOperations).set(cacheKey, "[]");
    }

    @Test
    void testGetCertificatesByClientId_JsonProcessingException() throws Exception {
        String clientId = "client1";
        String cachedData = "[{invalid-json}]";

        when(valueOperations.get(anyString())).thenReturn(cachedData);
        when(objectMapper.getTypeFactory()).thenReturn(new ObjectMapper().getTypeFactory());
        when(objectMapper.readValue(eq(cachedData), any(JavaType.class)))
                .thenThrow(JsonProcessingException.class);

        when(certificateRepository.findByClientIdOrderByCreatedDateDesc(clientId))
                .thenReturn(List.of());

        when(objectMapper.writeValueAsString(any())).thenReturn("[]");

        List<CertificateResponse> responses = certificateService.getCertificatesByClientId(clientId);
        assertEquals(0, responses.size());
    }

    @Test
    void testGetAllCertificates() {
        List<Certificate> certList = List.of(new Certificate(), new Certificate());
        when(certificateRepository.findAll()).thenReturn(certList);

        List<CertificateResponse> responses = certificateService.getAllCertificates();
        assertEquals(2, responses.size());
    }

    @Test
    void testCacheCertificateInCluster_Success() throws Exception {
        Certificate cert = Certificate.builder()
                .clientId("client1")
                .jwtTxt("xyz.jwt.token")
                .build();

        when(objectMapper.writeValueAsString(any())).thenReturn("{json}");

        certificateService.cacheCertificateInCluster(cert);

        verify(redisTemplate).delete("CACHE::CLIENT::client1");
        verify(valueOperations).set(startsWith("CACHE::LOOKUP::"), "{json}");
    }

    @Test
    void testCacheCertificateInCluster_JsonException() throws Exception {
        Certificate cert = Certificate.builder().clientId("client1").jwtTxt("jwt").build();

        when(objectMapper.writeValueAsString(any())).thenThrow(JsonProcessingException.class);

        certificateService.cacheCertificateInCluster(cert);
        verify(redisTemplate, never()).delete(any());
    }
}



package com.example.certificate; // Adjust to your actual package

import com.example.certificate.controller.CertificateController;
import com.example.certificate.dto.CertificateResponse;
import com.example.certificate.service.CertificateService;

import jakarta.servlet.http.HttpServletRequest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.security.Principal;
import java.util.Base64;
import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CertificateControllerTest {

    @InjectMocks
    private CertificateController certificateController;

    @Mock
    private CertificateService certificateService;

    @Mock
    private HttpServletRequest httpServletRequest;

    @Mock
    private Principal mockPrincipal;

    @BeforeEach
    void setup() {
        when(httpServletRequest.getUserPrincipal()).thenReturn(mockPrincipal);
        when(mockPrincipal.getName()).thenReturn("admin_user");
    }

    @Test
    void testSaveCert_Success() throws Exception {
        String samplePem = "-----BEGIN CERTIFICATE-----\n" +
                Base64.getEncoder().encodeToString("test".getBytes()) +
                "\n-----END CERTIFICATE-----";

        CertificateResponse response = new CertificateResponse();
        when(certificateService.saveCertificate(any())).thenReturn(response);

        ResponseEntity<?> result = certificateController.saveCert("clientId", samplePem, httpServletRequest);

        assertEquals(HttpStatus.CREATED, result.getStatusCode());
    }

    @Test
    void testSaveCert_InvalidPem_ThrowsException() throws Exception {
        String invalidPem = "not-a-certificate";

        ResponseEntity<?> result = certificateController.saveCert("clientId", invalidPem, httpServletRequest);

        assertEquals(HttpStatus.BAD_REQUEST, result.getStatusCode());
        assertTrue(result.getBody().toString().contains("Failed to process certificate"));
    }

    @Test
    void testFindAllCerts_Success() {
        List<CertificateResponse> responses = List.of(new CertificateResponse());
        when(certificateService.getAllCertificates()).thenReturn(responses);

        ResponseEntity<List<CertificateResponse>> response = certificateController.findAllCerts(httpServletRequest);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(1, response.getBody().size());
    }

    @Test
    void testGetCertificatesByClientId_Success() {
        List<CertificateResponse> responses = List.of(new CertificateResponse());
        when(certificateService.getCertificatesByClientId("client123")).thenReturn(responses);

        ResponseEntity<List<CertificateResponse>> response = certificateController.getCertificatesByClientId("client123");

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(1, response.getBody().size());
    }

    @Test
    void testGetJwks_Success() {
        CertificateResponse response = new CertificateResponse();
        response.setJwk("{\"kty\":\"RSA\"}");

        when(certificateService.getCertificatesByClientId("client123"))
            .thenReturn(List.of(response));

        ResponseEntity<String> jwks = certificateController.getJwks("client123");

        assertEquals(HttpStatus.OK, jwks.getStatusCode());
        assertTrue(jwks.getBody().contains("kty"));
    }

    @Test
    void testGetJwks_WithErrorInJwk() {
        CertificateResponse response = new CertificateResponse();
        response.setJwk("invalid");

        when(certificateService.getCertificatesByClientId("client123"))
            .thenReturn(List.of(response));

        ResponseEntity<String> jwks = certificateController.getJwks("client123");

        assertEquals(HttpStatus.OK, jwks.getStatusCode());
    }
}
String samplePem = "-----BEGIN CERTIFICATE-----\n" +
        "MIIBszCCAVugAwIBAgIUYmEIRqkqMJWAcijrxakTHYKqQm4wCgYIKoZIzj0EAwIw\n" +
        "EjEQMA4GA1UEAwwHZXhhbXBsZTAeFw0yNTA1MTgxMDAwMDBaFw0yNjA1MTgxMDAw\n" +
        "MDBaMBIxEDAOBgNVBAMMB2V4YW1wbGUwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNC\n" +
        "AAQ7X+l7vmQv/Oa5FvjgX+IMYxGPrF+WWiZpWKEHb65PgEBrmB12a+xW3sG32F47\n" +
        "PMxTGDRb0VemSkMjwbKZovE8oyMwITAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/\n" +
        "BAUwAwEB/zAKBggqhkjOPQQDAgNJADBGAiEA2gbs4ZlMwUvm66wHC+5hNQkN3+Zh\n" +
        "R5B6uxUiE32xAxcCIQDyFqWhFy2HxS1G3ZKCR8Z0K+H0NB8pCltY9w1NRhZ5Zg==\n" +
        "-----END CERTIFICATE-----";
mport static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariConfig;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class DataSourceConfigTest {

    @Mock
    private DataSourcePropsConfig dsPropConfig;

    @InjectMocks
    private DataSourceConfig dataSourceConfig;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testHikariDataSource() {
        // Arrange: mock the configuration values
        when(dsPropConfig.getUrl()).thenReturn("jdbc:h2:mem:testdb");
        when(dsPropConfig.getUser()).thenReturn("sa");
        when(dsPropConfig.getPwd()).thenReturn("password");

        // Act
        HikariDataSource dataSource = dataSourceConfig.hikariDataSource();

        // Assert
        assertEquals("jdbc:h2:mem:testdb", dataSource.getJdbcUrl());
        assertEquals("sa", dataSource.getUsername());
        assertEquals("password", dataSource.getPassword());
    }
}
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>5.8.0</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter</artifactId>
    <version>5.10.0</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>com.zaxxer</groupId>
    <artifactId>HikariCP</artifactId>
    <version>5.1.0</version>
</dependency>

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.time.Duration;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockedStatic;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;

import static org.mockito.Mockito.mockStatic;

public class RedisConfigTest {

    private RedisConfig redisConfig;

    @BeforeEach
    public void setUp() {
        redisConfig = new RedisConfig();

        // Set private fields using reflection or manually expose setters for testing
        redisConfig.redisPassword = "testPwd";
        redisConfig.timeout = 2000L;
        redisConfig.masterHost = "localhost";
        redisConfig.redisPort = 6379;
        redisConfig.replicaHost = "localhost";
    }

    @Test
    public void testRedisConnectionFactory() {
        LettuceConnectionFactory factory = redisConfig.redisConnectionFactory();
        assertNotNull(factory);
        assertNotNull(factory.getStandaloneConfiguration());
    }

    @Test
    public void testRedisTemplate() {
        LettuceConnectionFactory factory = redisConfig.redisConnectionFactory();
        RedisTemplate<String, String> template = redisConfig.redisTemplate();
        template.setConnectionFactory(factory);

        assertNotNull(template);
        assertNotNull(template.getConnectionFactory());
    }
}

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.GCMParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.junit.jupiter.api.Test;

public class EncryptionUtilTest {

    private static final int IV_LENGTH_BYTE = 12;
    private static final int TAG_LENGTH_BIT = 128;
    private static final int SRC_POS = 0;
    private static final String AES = "AES";
    private static final String AES_GCM_NO_PADDING = "AES/GCM/NoPadding";

    @Test
    void testDecryptionFlow() throws Exception {
        // Prepare
        String plainText = "hello-world";
        byte[] iv = new byte[IV_LENGTH_BYTE];
        byte[] keyBytes = "1234567890123456".getBytes(); // 16 bytes = 128-bit key
        SecretKey secretKey = new SecretKeySpec(keyBytes, AES);

        // Encrypt (to get encrypted input for test)
        Cipher cipher = Cipher.getInstance(AES_GCM_NO_PADDING);
        GCMParameterSpec gcmSpec = new GCMParameterSpec(TAG_LENGTH_BIT, iv);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, gcmSpec);
        byte[] encryptedBytes = cipher.doFinal(plainText.getBytes());

        // Combine IV + CipherText
        byte[] encryptedPayload = new byte[IV_LENGTH_BYTE + encryptedBytes.length];
        System.arraycopy(iv, 0, encryptedPayload, 0, IV_LENGTH_BYTE);
        System.arraycopy(encryptedBytes, 0, encryptedPayload, IV_LENGTH_BYTE, encryptedBytes.length);
        String encryptedBase64 = Base64.getEncoder().encodeToString(encryptedPayload);

        // Act (directly test decVal)
        String decrypted = callDecVal(encryptedBase64, secretKey);

        // Assert
        assertEquals(plainText, decrypted);
    }

    // Simulated version of your decVal method
    private String callDecVal(String encStr, SecretKey secretKey) {
        try {
            byte[] combinedData = Base64.getDecoder().decode(encStr.trim());
            byte[] iv = new byte[IV_LENGTH_BYTE];
            System.arraycopy(combinedData, SRC_POS, iv, 0, IV_LENGTH_BYTE);
            byte[] cipherText = new byte[combinedData.length - IV_LENGTH_BYTE];
            System.arraycopy(combinedData, IV_LENGTH_BYTE, cipherText, SRC_POS, cipherText.length);
            Cipher cipher = Cipher.getInstance(AES_GCM_NO_PADDING);
            GCMParameterSpec gcmSpec = new GCMParameterSpec(TAG_LENGTH_BIT, iv);
            cipher.init(Cipher.DECRYPT_MODE, secretKey, gcmSpec);
            byte[] decryptedBytes = cipher.doFinal(cipherText);
            return new String(decryptedBytes);
        } catch (Exception e) {
            e.printStackTrace();
            return "";
        }
    }
}
private static final int IV_LENGTH_BYTE = 12;
private static final int TAG_LENGTH_BIT = 128;
private static final int SRC_POS = 0;
private static final String AES = "AES";
private static final String AES_GCM_NO_PADDING = "AES/GCM/NoPadding";




@WebMvcTest

MockMvc

TestSecurityContext

spring-security-test

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest
public class SecurityConfigTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private YourController controller; // Mock all controller dependencies for isolated security testing

    @Test
    public void testHealthEndpointShouldBePublic() throws Exception {
        mockMvc.perform(get("/actuator/health"))
               .andExpect(status().isOk());
    }

    @Test
    @WithMockUser(roles = "acujwksReadRole")
    public void testReadJwksEndpointWithProperRole() throws Exception {
        mockMvc.perform(get("/v1/cert/some-cert-id"))
               .andExpect(status().isOk());
    }

    @Test
    @WithMockUser(roles = "WRONG_ROLE")
    public void testReadJwksEndpointWithWrongRole() throws Exception {
        mockMvc.perform(get("/v1/cert/some-cert-id"))
               .andExpect(status().isForbidden());
    }

    @Test
    @WithMockUser(roles = "acujwksUpdateRole")
    public void testPutJwksEndpointWithUpdateRole() throws Exception {
        mockMvc.perform(get("/v1/cert/some-cert-id").with(request -> {
            request.setMethod("PUT");
            return request;
        })).andExpect(status().isOk());
    }

    @Test
    public void testJwtAuthenticationConverterCreation() {
        SecurityConfig config = new SecurityConfig(); // Replace with your actual config class name
        assert config.getJwtAuthenticationConverter() != null;
    }

    @Test
    public void testJwtAuthoritiesConverter() {
        SecurityConfig config = new SecurityConfig(); // Replace with your actual config class name
        assert config.getJwtGrantedAuthoritiesConverter() != null;
    }
}
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-test</artifactId>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
